# ks.test(dist2,dist7)
# ks.test(dist2,dist8)
# ks.test(dist2,dist9)
# ks.test(dist3,dist7)
# ks.test(dist3,dist8)
# ks.test(dist3,dist9)
# ks.test(dist1,dist5)
# ks.test(dist1,dist6)
# ks.test(dist2,dist5)
# ks.test(dist2,dist6)
# N/2 vs. N
# ks.test(dist4,dist7)
# ks.test(dist4,dist8)
# ks.test(dist4,dist9)
# ks.test(dist5,dist7)
# ks.test(dist5,dist8)
# ks.test(dist5,dist9)
# ks.test(dist6,dist7)
# ks.test(dist6,dist8)
# ks.test(dist6,dist9)
# ks.test(dist3,dist5)
# ks.test(dist3,dist6)
# ks.test(dist4,dist5)
# ks.test(dist4,dist6)
dists <- list(dist1,dist2,dist3,dist4,dist5,dist6);
alldists <- c(dist1,dist2,dist3,dist4,dist5,dist6);
tsts = c();
dsts = c();
maxdsts = c();
for (i in 1:(length(dists)-1)) {
for (j in (i+1):length(dists)) {
tst <- ks.test(dists[[i]],dists[[j]])
tmp <- tst$p.value
disttmp <- tst$statistic
tsts <- c(tsts,tmp)
dsts <- c(dsts,disttmp)
}
}
# tsts
# mean(tsts)
# max(dsts)
sampledist = max(dsts)
sampledist
maxdists = c()
for (m in 1:1000) {
perm <- sample(alldists,length(alldists),replace=FALSE)
splits = split(perm, ceiling(seq_along(perm)/(length(dist1))))
tsts = c()
dsts = c()
maxdsts = c()
for (i in 1:(length(splits)-1)) {
for (j in (i+1):length(splits)) {
tst <- ks.test(splits[[i]],splits[[j]])
tmp <- tst$p.value
disttmp <- tst$statistic
tsts <- c(tsts,tmp)
dsts <- c(dsts,disttmp)
}
}
maxdists <- c(maxdists,max(dsts))
}
mdsort = sort(maxdists)
which.max(mdsort[mdsort<=sampledist])
which.max(mdsort[mdsort<=sampledist])
mdsort = sort(maxdists)
mdsort
sampledist
#you might need to install this package in your version of R.
library("rms");
#change this to your working directory
setwd("/Users/ansonkahng/Fontana/src/spring15")
#load the data from disk
# model_data <- read.csv("./data/500_100_sf.csv");  # 0, N
# model_data <- read.csv("./data/v2_500_1000_r.csv");  # 0, N/2
# model_data <- read.csv("./data/v2_750_1500_r.csv");  # 0, 0, 1, N/2, N-1, N
# model_data <- read.csv("./data/v2_500_1500_r.csv");  # 0, 0, 0, N/2, N/2, N/2, N, N, N
# model_data <- read.csv("./data/v3_500_1500_r.csv");  # 0, 0, 0, N/2, N/2, N/2, N, N, N
model_data <- read.csv("./data/v4_500_1500_80_r.csv");
# model_data <- read.csv("./data/v2_500_1550_r.csv");  # 0, 0, N/2, N/2, N, N
# model_data <- read.csv("./data/1000_200_r.csv");  # 0, 1, 2, N/2, N-2, N-1, N
# model_data <- read.csv("./data/1000_500_r.csv");  # 0, 1, 2, N/2, N-2, N-1, N
# model_data <- read.csv("./data/100_50_r.csv");  # 0, 0 but with different labels
#Assign each individual a label the AFT algorithm will then interpret as a categorical variable
# use model_data$name
#Assign each individual a label the AFT algorithm will then interpret as a categorical variable
# bj_group = k for this run (num of nodes changed)
model_data$bj_group = factor(model_data$k);
#chose an arbitrary group among animals unexposed to choloroquine to use as a reference group
bj_reference_label = model_data$bj_group[model_data$bj_group==0][1]
# ^ hardcoded in; change later please
#set up the categorical variable for the AFT,
#so that the algorithm will know to use the
#chosen reference group.rm
groups = levels(model_data$bj_group)
bj_reference_level = which(groups == bj_reference_label)
num_groups = length(groups)
contrasts(model_data$bj_group) <- contr.treatment(num_groups,base=bj_reference_level);
#solve the AFT model using the Buckley James method.
#A good read might be http://www.ncbi.nlm.nih.gov/pmc/articles/PMC2583435/
ret_prop  <- bj(Surv(model_data$fpt,1-model_data$alive)~model_data$name,
x=TRUE, y=TRUE)
#get the residuals
r_prop <- resid(ret_prop, type="censored")
model_data$bj_residual = exp(r_prop[,1]);
##We might want to consider the actual coefficients for each group (as opposed to the residuals)
##The default labels in the bj coefficient table aren't reliable, so we need to reconstruct this table.
coeff_labels = c(as.character(bj_reference_label),groups[groups!=bj_reference_label])
n = as.character(coeff_labels)
p =regexpr(":",n)-1;
n[p!=-2] = substring(n[p!=-2],0,p[p!=-2])
n = as.double(n);
scaling = data.frame(group=coeff_labels,coeff=exp(ret_prop$coefficients))
rownames(scaling) = NULL;
#zero out the reference group (to which bj assigns the model intercept)
scaling$coeff[1]=1;
#count the number of individuals in each group.
agg <- aggregate(data=model_data, model_data$fpt ~ model_data$name, function(x) length(unique(x)))
names(agg) = c("bj_group","N")
scaling$N = "";
for (j in 1:(dim(agg)[1])){
scaling[scaling$group==as.character(agg$bj_group[[j]]),"N"] = agg$N[[j]];
}
scaling$N = as.double(scaling$N)
#plot the original data
par(mfrow=c(2,2),mar=c(4,4,.5,.5));
s = survfit(Surv(model_data$fpt,1-model_data$alive)~model_data$name)
conc = substring(names(s$strata),17,60)  # get name  # doesn't work?
colors = rep("black",length(conc));
colors[conc=='r_2500_100_0.0025_0.0_0.0']="green";
colors[conc=='sf_2500_100_0.0025_0.0_0.0']="green";
colors[conc=='r_2500_100_0.00375_0.0_0.0']="red";
colors[conc=='sf_2500_100_0.00375_0.0_0.0']="red";
colors[conc=='r_2500_100_0.0075_0.0_0.0']="blue";
colors[conc=='sf_2500_100_0.0075_0.0_0.0']="blue";
plot(s,col=colors,mark.time=F,xlab="time (days)",ylab="S[t]")
#plot regression model coefficients
# plot(scaling$group,scaling$coef)  # also fix later...log plot?
# colors = rep("black",length(scaling$concentration));
# colors[scaling$concentration==16]="green";
# colors[scaling$concentration==32]="red";
# plot(scaling$concentration,scaling$coef,
#      log="y",col=colors,
#      xlab="[chloroquine]",ylab="AFT model coefficient")
# legend("topright",title="[chloroquine]",
#        legend=c(0,16,32),col=c("black","green","red"),lty=1,bty="n")
#plot regression model residuals
s = survfit(Surv(model_data$bj_residual,
1-model_data$alive)~model_data$name)
# s[1]$time
# s[2]$time
# length(s[1]$time)
# length(s[2]$time)
conc = substring(names(s$strata),17,60)  # get name  # doesn't work?
colors = rep("black",length(conc));
colors[conc=='r_2500_100_0.0025_0.0_0.0']="green";
colors[conc=='sf_2500_100_0.0025_0.0_0.0']="green";
colors[conc=='r_2500_100_0.00375_0.0_0.0']="red";
colors[conc=='sf_2500_100_0.00375_0.0_0.0']="red";
colors[conc=='r_2500_100_0.0075_0.0_0.0']="blue";
colors[conc=='sf_2500_100_0.0075_0.0_0.0']="blue";
plot(s,col=colors,mark.time=F,xlab="time (days)",ylab="S[t]")
#plot aggregated model residuals
s = survfit(Surv(model_data$bj_residual,
1-model_data$alive)~model_data$bj_group)
# how to index into s to get raw times after AFT??
# s[1]$time
# s[2]$time
conc = substring(names(s$strata),21,40)  # get name  # doesn't work?
colors = rep("black",length(conc));
colors[conc=='0.0025']="green";
colors[conc=='0.00375']="blue";
colors[conc=='0.0075']="red";
plot(s,col=colors,mark.time=F,xlab="time (days)",ylab="S[t]")
# length(s[1]$time)
# s[1]$time
# time = only the unique lifespans?
# summary(s)$surv
# summary(s)$time
# sum(summary(s)$n.event)
# summary(s)
# unique events, number of times each is repeated
# summary(s[1])$time
# summary(s[1])$n.event
dist1 <- rep(summary(s[1])$time, times = summary(s[1])$n.event)
dist2 <- rep(summary(s[2])$time, times = summary(s[2])$n.event)
dist3 <- rep(summary(s[3])$time, times = summary(s[3])$n.event)
dist4 <- rep(summary(s[4])$time, times = summary(s[4])$n.event)
dist5 <- rep(summary(s[5])$time, times = summary(s[5])$n.event)
dist6 <- rep(summary(s[6])$time, times = summary(s[6])$n.event)
# dist7 <- rep(summary(s[7])$time, times = summary(s[7])$n.event)
# dist8 <- rep(summary(s[8])$time, times = summary(s[8])$n.event)
# dist9 <- rep(summary(s[9])$time, times = summary(s[9])$n.event)
# Kolmogorov-Smirnov test -- two-sample
# 0
# ks.test(dist1,dist2)
# ks.test(dist1,dist3)
# ks.test(dist2,dist3)
# N/2
# ks.test(dist4,dist5)
# ks.test(dist4,dist6)
# ks.test(dist5,dist6)
# ks.test(dist3,dist4)
# N
# ks.test(dist7,dist8)
# ks.test(dist7,dist9)
# ks.test(dist8,dist9)
# ks.test(dist5,dist6)
# 0 vs. N/2
# ks.test(dist1,dist4)
# ks.test(dist1,dist5)
# ks.test(dist1,dist6)
# ks.test(dist2,dist4)
# ks.test(dist2,dist5)
# ks.test(dist2,dist6)
# ks.test(dist3,dist4)
# ks.test(dist3,dist5)
# ks.test(dist3,dist6)
# ks.test(dist1,dist3)
# ks.test(dist2,dist3)
# ks.test(dist1,dist4)
# ks.test(dist2,dist4)
# 0 vs. N
# ks.test(dist1,dist7)
# ks.test(dist1,dist8)
# ks.test(dist1,dist9)
# ks.test(dist2,dist7)
# ks.test(dist2,dist8)
# ks.test(dist2,dist9)
# ks.test(dist3,dist7)
# ks.test(dist3,dist8)
# ks.test(dist3,dist9)
# ks.test(dist1,dist5)
# ks.test(dist1,dist6)
# ks.test(dist2,dist5)
# ks.test(dist2,dist6)
# N/2 vs. N
# ks.test(dist4,dist7)
# ks.test(dist4,dist8)
# ks.test(dist4,dist9)
# ks.test(dist5,dist7)
# ks.test(dist5,dist8)
# ks.test(dist5,dist9)
# ks.test(dist6,dist7)
# ks.test(dist6,dist8)
# ks.test(dist6,dist9)
# ks.test(dist3,dist5)
# ks.test(dist3,dist6)
# ks.test(dist4,dist5)
# ks.test(dist4,dist6)
dists <- list(dist1,dist2,dist3,dist4,dist5,dist6);
alldists <- c(dist1,dist2,dist3,dist4,dist5,dist6);
tsts = c();
dsts = c();
maxdsts = c();
for (i in 1:(length(dists)-1)) {
for (j in (i+1):length(dists)) {
tst <- ks.test(dists[[i]],dists[[j]])
tmp <- tst$p.value
disttmp <- tst$statistic
tsts <- c(tsts,tmp)
dsts <- c(dsts,disttmp)
}
}
# tsts
# mean(tsts)
# max(dsts)
sampledist = max(dsts)
sampledist
maxdists = c()
for (m in 1:1000) {
perm <- sample(alldists,length(alldists),replace=FALSE)
splits = split(perm, ceiling(seq_along(perm)/(length(dist1))))
tsts = c()
dsts = c()
for (i in 1:(length(splits)-1)) {
for (j in (i+1):length(splits)) {
tst <- ks.test(splits[[i]],splits[[j]])
tmp <- tst$p.value
disttmp <- tst$statistic
tsts <- c(tsts,tmp)
dsts <- c(dsts,disttmp)
}
}
maxdists <- c(maxdists,max(dsts))
}
mdsort = sort(maxdists)
which.max(mdsort[mdsort<=sampledist])
maxdists
which.max(mdsort[mdsort<=sampledist])
mdsort
#you might need to install this package in your version of R.
library("rms");
#change this to your working directory
setwd("/Users/ansonkahng/Fontana/src/spring15")
#load the data from disk
# model_data <- read.csv("./data/500_100_sf.csv");  # 0, N
# model_data <- read.csv("./data/v2_500_1000_r.csv");  # 0, N/2
# model_data <- read.csv("./data/v2_750_1500_r.csv");  # 0, 0, 1, N/2, N-1, N
# model_data <- read.csv("./data/v2_500_1500_r.csv");  # 0, 0, 0, N/2, N/2, N/2, N, N, N
# model_data <- read.csv("./data/v3_500_1500_r.csv");  # 0, 0, 0, N/2, N/2, N/2, N, N, N
model_data <- read.csv("./data/v4_500_1500_80_r.csv");
# model_data <- read.csv("./data/v2_500_1550_r.csv");  # 0, 0, N/2, N/2, N, N
# model_data <- read.csv("./data/1000_200_r.csv");  # 0, 1, 2, N/2, N-2, N-1, N
# model_data <- read.csv("./data/1000_500_r.csv");  # 0, 1, 2, N/2, N-2, N-1, N
# model_data <- read.csv("./data/100_50_r.csv");  # 0, 0 but with different labels
#Assign each individual a label the AFT algorithm will then interpret as a categorical variable
# use model_data$name
#Assign each individual a label the AFT algorithm will then interpret as a categorical variable
# bj_group = k for this run (num of nodes changed)
model_data$bj_group = factor(model_data$k);
#chose an arbitrary group among animals unexposed to choloroquine to use as a reference group
bj_reference_label = model_data$bj_group[model_data$bj_group==0][1]
# ^ hardcoded in; change later please
#set up the categorical variable for the AFT,
#so that the algorithm will know to use the
#chosen reference group.rm
groups = levels(model_data$bj_group)
bj_reference_level = which(groups == bj_reference_label)
num_groups = length(groups)
contrasts(model_data$bj_group) <- contr.treatment(num_groups,base=bj_reference_level);
#solve the AFT model using the Buckley James method.
#A good read might be http://www.ncbi.nlm.nih.gov/pmc/articles/PMC2583435/
ret_prop  <- bj(Surv(model_data$fpt,1-model_data$alive)~model_data$name,
x=TRUE, y=TRUE)
#get the residuals
r_prop <- resid(ret_prop, type="censored")
model_data$bj_residual = exp(r_prop[,1]);
##We might want to consider the actual coefficients for each group (as opposed to the residuals)
##The default labels in the bj coefficient table aren't reliable, so we need to reconstruct this table.
coeff_labels = c(as.character(bj_reference_label),groups[groups!=bj_reference_label])
n = as.character(coeff_labels)
p =regexpr(":",n)-1;
n[p!=-2] = substring(n[p!=-2],0,p[p!=-2])
n = as.double(n);
scaling = data.frame(group=coeff_labels,coeff=exp(ret_prop$coefficients))
rownames(scaling) = NULL;
#zero out the reference group (to which bj assigns the model intercept)
scaling$coeff[1]=1;
#count the number of individuals in each group.
agg <- aggregate(data=model_data, model_data$fpt ~ model_data$name, function(x) length(unique(x)))
names(agg) = c("bj_group","N")
scaling$N = "";
for (j in 1:(dim(agg)[1])){
scaling[scaling$group==as.character(agg$bj_group[[j]]),"N"] = agg$N[[j]];
}
scaling$N = as.double(scaling$N)
#plot the original data
par(mfrow=c(2,2),mar=c(4,4,.5,.5));
s = survfit(Surv(model_data$fpt,1-model_data$alive)~model_data$name)
conc = substring(names(s$strata),17,60)  # get name  # doesn't work?
colors = rep("black",length(conc));
colors[conc=='r_2500_100_0.0025_0.0_0.0']="green";
colors[conc=='sf_2500_100_0.0025_0.0_0.0']="green";
colors[conc=='r_2500_100_0.00375_0.0_0.0']="red";
colors[conc=='sf_2500_100_0.00375_0.0_0.0']="red";
colors[conc=='r_2500_100_0.0075_0.0_0.0']="blue";
colors[conc=='sf_2500_100_0.0075_0.0_0.0']="blue";
plot(s,col=colors,mark.time=F,xlab="time (days)",ylab="S[t]")
#plot regression model coefficients
# plot(scaling$group,scaling$coef)  # also fix later...log plot?
# colors = rep("black",length(scaling$concentration));
# colors[scaling$concentration==16]="green";
# colors[scaling$concentration==32]="red";
# plot(scaling$concentration,scaling$coef,
#      log="y",col=colors,
#      xlab="[chloroquine]",ylab="AFT model coefficient")
# legend("topright",title="[chloroquine]",
#        legend=c(0,16,32),col=c("black","green","red"),lty=1,bty="n")
#plot regression model residuals
s = survfit(Surv(model_data$bj_residual,
1-model_data$alive)~model_data$name)
# s[1]$time
# s[2]$time
# length(s[1]$time)
# length(s[2]$time)
conc = substring(names(s$strata),17,60)  # get name  # doesn't work?
colors = rep("black",length(conc));
colors[conc=='r_2500_100_0.0025_0.0_0.0']="green";
colors[conc=='sf_2500_100_0.0025_0.0_0.0']="green";
colors[conc=='r_2500_100_0.00375_0.0_0.0']="red";
colors[conc=='sf_2500_100_0.00375_0.0_0.0']="red";
colors[conc=='r_2500_100_0.0075_0.0_0.0']="blue";
colors[conc=='sf_2500_100_0.0075_0.0_0.0']="blue";
plot(s,col=colors,mark.time=F,xlab="time (days)",ylab="S[t]")
#plot aggregated model residuals
s = survfit(Surv(model_data$bj_residual,
1-model_data$alive)~model_data$bj_group)
# how to index into s to get raw times after AFT??
# s[1]$time
# s[2]$time
conc = substring(names(s$strata),21,40)  # get name  # doesn't work?
colors = rep("black",length(conc));
colors[conc=='0.0025']="green";
colors[conc=='0.00375']="blue";
colors[conc=='0.0075']="red";
plot(s,col=colors,mark.time=F,xlab="time (days)",ylab="S[t]")
# length(s[1]$time)
# s[1]$time
# time = only the unique lifespans?
# summary(s)$surv
# summary(s)$time
# sum(summary(s)$n.event)
# summary(s)
# unique events, number of times each is repeated
# summary(s[1])$time
# summary(s[1])$n.event
dist1 <- rep(summary(s[1])$time, times = summary(s[1])$n.event)
dist2 <- rep(summary(s[2])$time, times = summary(s[2])$n.event)
dist3 <- rep(summary(s[3])$time, times = summary(s[3])$n.event)
dist4 <- rep(summary(s[4])$time, times = summary(s[4])$n.event)
dist5 <- rep(summary(s[5])$time, times = summary(s[5])$n.event)
dist6 <- rep(summary(s[6])$time, times = summary(s[6])$n.event)
# dist7 <- rep(summary(s[7])$time, times = summary(s[7])$n.event)
# dist8 <- rep(summary(s[8])$time, times = summary(s[8])$n.event)
# dist9 <- rep(summary(s[9])$time, times = summary(s[9])$n.event)
# Kolmogorov-Smirnov test -- two-sample
# 0
# ks.test(dist1,dist2)
# ks.test(dist1,dist3)
# ks.test(dist2,dist3)
# N/2
# ks.test(dist4,dist5)
# ks.test(dist4,dist6)
# ks.test(dist5,dist6)
# ks.test(dist3,dist4)
# N
# ks.test(dist7,dist8)
# ks.test(dist7,dist9)
# ks.test(dist8,dist9)
# ks.test(dist5,dist6)
# 0 vs. N/2
# ks.test(dist1,dist4)
# ks.test(dist1,dist5)
# ks.test(dist1,dist6)
# ks.test(dist2,dist4)
# ks.test(dist2,dist5)
# ks.test(dist2,dist6)
# ks.test(dist3,dist4)
# ks.test(dist3,dist5)
# ks.test(dist3,dist6)
# ks.test(dist1,dist3)
# ks.test(dist2,dist3)
# ks.test(dist1,dist4)
# ks.test(dist2,dist4)
# 0 vs. N
# ks.test(dist1,dist7)
# ks.test(dist1,dist8)
# ks.test(dist1,dist9)
# ks.test(dist2,dist7)
# ks.test(dist2,dist8)
# ks.test(dist2,dist9)
# ks.test(dist3,dist7)
# ks.test(dist3,dist8)
# ks.test(dist3,dist9)
# ks.test(dist1,dist5)
# ks.test(dist1,dist6)
# ks.test(dist2,dist5)
# ks.test(dist2,dist6)
# N/2 vs. N
# ks.test(dist4,dist7)
# ks.test(dist4,dist8)
# ks.test(dist4,dist9)
# ks.test(dist5,dist7)
# ks.test(dist5,dist8)
# ks.test(dist5,dist9)
# ks.test(dist6,dist7)
# ks.test(dist6,dist8)
# ks.test(dist6,dist9)
# ks.test(dist3,dist5)
# ks.test(dist3,dist6)
# ks.test(dist4,dist5)
# ks.test(dist4,dist6)
dists <- list(dist1,dist2,dist3,dist4,dist5,dist6);
alldists <- c(dist1,dist2,dist3,dist4,dist5,dist6);
tsts = c();
dsts = c();
maxdsts = c();
for (i in 1:(length(dists)-1)) {
for (j in (i+1):length(dists)) {
tst <- ks.test(dists[[i]],dists[[j]])
tmp <- tst$p.value
disttmp <- tst$statistic
tsts <- c(tsts,tmp)
dsts <- c(dsts,disttmp)
}
}
# tsts
# mean(tsts)
# max(dsts)
sampledist = max(dsts)
sampledist
maxdists = c()
for (m in 1:10) {
perm <- sample(alldists,length(alldists),replace=FALSE)
splits = split(perm, ceiling(seq_along(perm)/(length(dist1))))
tsts2 = c()
dsts2 = c()
for (i in 1:(length(splits)-1)) {
for (j in (i+1):length(splits)) {
tst2 <- ks.test(splits[[i]],splits[[j]])
tmp2 <- tst2$p.value
disttmp2 <- tst2$statistic
tsts2 <- c(tsts2,tmp2)
dsts2 <- c(dsts2,disttmp2)
}
}
maxdists <- c(maxdists,max(dsts2))
}
mdsort = sort(maxdists)
which.max(mdsort[mdsort<=sampledist])
mdsort
sampledist
