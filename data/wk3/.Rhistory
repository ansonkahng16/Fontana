print(result)
}
p <- 0.55
for(k in 1:30) {
f <- c(k+1:2*k)
result <- sum(dbinom(f,2*k,p))
print(result)
}
p <- 0.56
for(k in 1:30) {
f <- c(k+1:2*k)
result <- sum(dbinom(f,2*k,p))
print(result)
}
p <- 0.56
for(k in 1:30) {
f <- c(k+1:2*k)
print(f)
result <- sum(dbinom(f,2*k,p))
print(result)
}
f <- c(1:10)
f <- c(4:4*2)
f
f <- c(5:1:5*3)
f <- c(5:(5*3))
p <- 0.56
for(k in 1:30) {
f <- c((k+1):(2*k)
print(f)
result <- sum(dbinom(f,2*k,p))
print(result)
}
p <- 0.56
for(k in 1:30) {
f <- c((k+1):(2*k)
print(f)
result <- sum(dbinom(f,2*k,p))
print(result)
}
p <- 0.56
for(k in 1:30) {
f <- c((k+1):(2*k))
print(f)
result <- sum(dbinom(f,2*k,p))
print(result)
}
p <- 0.51
for(k in 1:30) {
f <- c((k+1):(2*k))
print(f)
result <- sum(dbinom(f,2*k,p))
print(result)
}
p <- 0.50
p <- 0.50
for(k in 1:30) {
f <- c((k+1):(2*k))
print(f)
result <- sum(dbinom(f,2*k,p))
print(result)
}
p <- 0.49
for(k in 1:30) {
f <- c((k+1):(2*k))
print(f)
result <- sum(dbinom(f,2*k,p))
print(result)
}
p <- 0.49
for(k in 1:30) {
f <- c((k+1):(2*k))
result <- sum(dbinom(f,2*k,p))
print(result)
}
p <- 0.49
maxprob <- 0
optn <- 0
for(k in 1:1000) {
f <- c((k+1):(2*k))
result <- sum(dbinom(f,2*k,p))
if result > maxprob {
maxprob = result
optn = k
}
print(result)
}
p <- 0.49
maxprob <- 0
optn <- 0
for(k in 1:1000) {
f <- c((k+1):(2*k))
result <- sum(dbinom(f,2*k,p))
if (result > maxprob) {
maxprob = result
optn = k
}
print(result)
}
p <- 0.49
maxprob <- 0
optn <- 0
for(k in 1:1000) {
f <- c((k+1):(2*k))
result <- sum(dbinom(f,2*k,p))
if (result > maxprob) {
maxprob = result
optn = k
}
print(result)
}
print(maxprob)
print(optn)
p <- 0.50
maxprob <- 0
optn <- 0
for(k in 1:1000) {
f <- c((k+1):(2*k))
result <- sum(dbinom(f,2*k,p))
if (result > maxprob) {
maxprob = result
optn = k
}
print(result)
}
print(maxprob)
print(optn)
p <- 0.51
maxprob <- 0
optn <- 0
for(k in 1:1000) {
f <- c((k+1):(2*k))
result <- sum(dbinom(f,2*k,p))
if (result > maxprob) {
maxprob = result
optn = k
}
print(result)
}
print(maxprob)
print(optn)
p <- 0.49
maxprob <- 0
optn <- 0
for(k in 1:1000) {
f <- c((k+1):(2*k))
result <- sum(dbinom(f,2*k,p))
if (result > maxprob) {
maxprob = result
optn = k
}
print(result)
}
print(maxprob)
print(optn)
p <- 0.50
maxprob <- 0
optn <- 0
for(k in 1:1000) {
f <- c((k+1):(2*k))
result <- sum(dbinom(f,2*k,p))
if (result > maxprob) {
maxprob = result
optn = k
}
print(result)
}
print(maxprob)
print(optn)
p <- 0.50
maxprob <- 0
optn <- 0
for(k in 1:10000) {
f <- c((k+1):(2*k))
result <- sum(dbinom(f,2*k,p))
if (result > maxprob) {
maxprob = result
optn = k
}
print(result)
}
print(maxprob)
print(optn)
p <- 0.49 # change p here to 0.49, 0.50, 0.51
maxprob <- 0 # store max probability over range
optn <- 0 # store value of n/2 that maximizes chance of winning
for(k in 1:1000) { # loop over all 1000 possibilities
f <- c((k+1):(2*k)) # create list to loop over
result <- sum(dbinom(f,2*k,p)) # P(win) = Sum_{k+1}^{2k} \binom{2k}{j} p^j q^{2k-j} from binomial theorem
if (result > maxprob) { # update max probability and best n/2 if necessary
maxprob = result
optn = k
}
print(result) # print each individual trial result
}
print(maxprob) # print max probability of winning
print(2 * optn) # print optimal n in this range
p <- 0.49 # change p here to 0.49, 0.50, 0.51
maxprob <- 0 # store max probability over range
optn <- 0 # store value of n/2 that maximizes chance of winning
for(k in 1:10) { # loop over all 1000 possibilities; 2 games to 2000 games
f <- c((k+1):(2*k)) # create list to loop over
# P(win) = Sum_{k+1}^{2k} \binom{2k}{j} p^j q^{2k-j} from binomial theorem
result <- sum(dbinom(f,2*k,p))
if (result > maxprob) { # update max probability and best n/2 if necessary
maxprob = result
optn = k
}
print(result) # print each individual trial result
}
print(maxprob) # print max probability of winning
print(2 * optn) # print optimal n in this range
p <- 0.49 # change p here to 0.49, 0.50, 0.51
maxprob <- 0 # store max probability over range
optn <- 0 # store value of n/2 that maximizes chance of winning
for(k in 1:1000) { # loop over all 1000 possibilities; 2 games to 2000 games
f <- c((k+1):(2*k)) # create list to loop over
# P(win) = Sum_{k+1}^{2k} \binom{2k}{j} p^j q^{2k-j} from binomial theorem
result <- sum(dbinom(f,2*k,p))
if (result > maxprob) { # update max probability and best n/2 if necessary
maxprob = result
optn = k
}
print(result) # print each individual trial result
}
print(maxprob) # print max probability of winning
print(2 * optn) # print optimal n in this range
p <- 0.51 # change p here to 0.49, 0.50, 0.51
maxprob <- 0 # store max probability over range
optn <- 0 # store value of n/2 that maximizes chance of winning
for(k in 1:1000) { # loop over all 1000 possibilities; 2 games to 2000 games
f <- c((k+1):(2*k)) # create list to loop over
# P(win) = Sum_{k+1}^{2k} \binom{2k}{j} p^j q^{2k-j} from binomial theorem
result <- sum(dbinom(f,2*k,p))
if (result > maxprob) { # update max probability and best n/2 if necessary
maxprob = result
optn = k
}
print(result) # print each individual trial result
}
print(maxprob) # print max probability of winning
print(2 * optn) # print optimal n in this range
p <- 0.51 # change p here to 0.49, 0.50, 0.51
maxprob <- 0 # store max probability over range
optn <- 0 # store value of n/2 that maximizes chance of winning
for(k in 1:10) { # loop over all 1000 possibilities; 2 games to 2000 games
f <- c((k+1):(2*k)) # create list to loop over
# P(win) = Sum_{k+1}^{2k} \binom{2k}{j} p^j q^{2k-j} from binomial theorem
result <- sum(dbinom(f,2*k,p))
if (result > maxprob) { # update max probability and best n/2 if necessary
maxprob = result
optn = k
}
print(result) # print each individual trial result
}
print(maxprob) # print max probability of winning
print(2 * optn) # print optimal n in this range
p <- 0.50 # change p here to 0.49, 0.50, 0.51
maxprob <- 0 # store max probability over range
optn <- 0 # store value of n/2 that maximizes chance of winning
for(k in 1:10) { # loop over all 1000 possibilities; 2 games to 2000 games
f <- c((k+1):(2*k)) # create list to loop over
# P(win) = Sum_{k+1}^{2k} \binom{2k}{j} p^j q^{2k-j} from binomial theorem
result <- sum(dbinom(f,2*k,p))
if (result > maxprob) { # update max probability and best n/2 if necessary
maxprob = result
optn = k
}
print(result) # print each individual trial result
}
print(maxprob) # print max probability of winning
print(2 * optn) # print optimal n in this range
p <- 0.50 # change p here to 0.49, 0.50, 0.51
maxprob <- 0 # store max probability over range
optn <- 0 # store value of n/2 that maximizes chance of winning
for(k in 1:1002) { # loop over all 1000 possibilities; 2 games to 2000 games
f <- c((k+1):(2*k)) # create list to loop over
# P(win) = Sum_{k+1}^{2k} \binom{2k}{j} p^j q^{2k-j} from binomial theorem
result <- sum(dbinom(f,2*k,p))
if (result > maxprob) { # update max probability and best n/2 if necessary
maxprob = result
optn = k
}
print(result) # print each individual trial result
}
print(maxprob) # print max probability of winning
print(2 * optn) # print optimal n in this range
p <- 0.50 # change p here to 0.49, 0.50, 0.51
maxprob <- 0 # store max probability over range
optn <- 0 # store value of n/2 that maximizes chance of winning
for(k in 1:10002) { # loop over all 1000 possibilities; 2 games to 2000 games
f <- c((k+1):(2*k)) # create list to loop over
# P(win) = Sum_{k+1}^{2k} \binom{2k}{j} p^j q^{2k-j} from binomial theorem
result <- sum(dbinom(f,2*k,p))
if (result > maxprob) { # update max probability and best n/2 if necessary
maxprob = result
optn = k
}
print(result) # print each individual trial result
}
print(maxprob) # print max probability of winning
print(2 * optn) # print optimal n in this range
p <- 0.50 # change p here to 0.49, 0.50, 0.51
maxprob <- 0 # store max probability over range
optn <- 0 # store value of n/2 that maximizes chance of winning
for(k in 1:30) { # loop over all 1000 possibilities; 2 games to 2000 games
f <- c((k+1):(2*k)) # create list to loop over
# P(win) = Sum_{k+1}^{2k} \binom{2k}{j} p^j q^{2k-j} from binomial theorem
result <- sum(dbinom(f,2*k,p))
if (result > maxprob) { # update max probability and best n/2 if necessary
maxprob = result
optn = k
}
print(result) # print each individual trial result
}
print(maxprob) # print max probability of winning
print(2 * optn) # print optimal n in this range
p <- 0.49 # change p here to 0.49, 0.50, 0.51
maxprob <- 0 # store max probability over range
optn <- 0 # store value of n/2 that maximizes chance of winning
for(k in 1:30) { # loop over all 1000 possibilities; 2 games to 2000 games
f <- c((k+1):(2*k)) # create list to loop over
# P(win) = Sum_{k+1}^{2k} \binom{2k}{j} p^j q^{2k-j} from binomial theorem
result <- sum(dbinom(f,2*k,p))
if (result > maxprob) { # update max probability and best n/2 if necessary
maxprob = result
optn = k
}
print(result) # print each individual trial result
}
print(maxprob) # print max probability of winning
print(2 * optn) # print optimal n in this range
p <- 0.49 # change p here to 0.49, 0.50, 0.51
maxprob <- 0 # store max probability over range
optn <- 0 # store value of n/2 that maximizes chance of winning
for(k in 1:1000) { # loop over all 1000 possibilities; 2 games to 2000 games
f <- c((k+1):(2*k)) # create list to loop over
# P(win) = Sum_{k+1}^{2k} \binom{2k}{j} p^j q^{2k-j} from binomial theorem
result <- sum(dbinom(f,2*k,p))
if (result > maxprob) { # update max probability and best n/2 if necessary
maxprob = result
optn = k
}
print(result) # print each individual trial result
}
print(maxprob) # print max probability of winning
print(2 * optn) # print optimal n in this range
p <- 0.49 # change p here to 0.49, 0.50, 0.51
maxprob <- 0 # store max probability over range
optn <- 0 # store value of n/2 that maximizes chance of winning
for(k in 1:1000) { # loop over all 1000 possibilities; 2 games to 2000 games
f <- c((k+1):(2*k)) # create list to loop over
# P(win) = Sum_{k+1}^{2k} \binom{2k}{j} p^j q^{2k-j} from binomial theorem
result <- sum(dbinom(f,2*k,p))
if (result > maxprob) { # update max probability and best n/2 if necessary
maxprob = result
optn = k
}
print(result) # print each individual trial result
}
print(maxprob) # print max probability of winning
print(2 * optn) # print optimal n in this range
p <- 0.49 # change p here to 0.49, 0.50, 0.51
maxprob <- 0 # store max probability over range
optn <- 0 # store value of n/2 that maximizes chance of winning
for(k in 1:1000) { # loop over all 1000 possibilities; 2 games to 2000 games
f <- c((k+1):(2*k)) # create list to loop over
# P(win) = Sum_{k+1}^{2k} \binom{2k}{j} p^j q^{2k-j} from binomial theorem
result <- sum(dbinom(f,2*k,p))
if (result > maxprob) { # update max probability and best n/2 if necessary
maxprob = result
optn = k
}
print(result) # print each individual trial result
}
print(maxprob) # print max probability of winning
print(2 * optn) # print optimal n in this range
p <- 0.49 # change p here to 0.49, 0.50, 0.51
maxprob <- 0 # store max probability over range
optn <- 0 # store value of n/2 that maximizes chance of winning
for(k in 1:50) { # loop over all 1000 possibilities; 2 games to 2000 games
f <- c((k+1):(2*k)) # create list to loop over
# P(win) = \sum_{k+1}^{2k} \binom{2k}{j} p^j q^{2k-j} from binomial theorem
result <- sum(dbinom(f,2*k,p))
if (result > maxprob) { # update max probability and best n/2 if necessary
maxprob = result
optn = k
}
print(result) # print each individual trial result
}
print(maxprob) # print max probability of winning
print(2 * optn) # print optimal n in this range
p <- 0.51 # change p here to 0.49, 0.50, 0.51
maxprob <- 0 # store max probability over range
optn <- 0 # store value of n/2 that maximizes chance of winning
for(k in 1:50) { # loop over all 1000 possibilities; 2 games to 2000 games
f <- c((k+1):(2*k)) # create list to loop over
# P(win) = \sum_{k+1}^{2k} \binom{2k}{j} p^j q^{2k-j} from binomial theorem
result <- sum(dbinom(f,2*k,p))
if (result > maxprob) { # update max probability and best n/2 if necessary
maxprob = result
optn = k
}
print(result) # print each individual trial result
}
print(maxprob) # print max probability of winning
print(2 * optn) # print optimal n in this range
p <- 0.51 # change p here to 0.49, 0.50, 0.51
maxprob <- 0 # store max probability over range
optn <- 0 # store value of n/2 that maximizes chance of winning
for(k in 1:100) { # loop over all 1000 possibilities; 2 games to 2000 games
f <- c((k+1):(2*k)) # create list to loop over
# P(win) = \sum_{k+1}^{2k} \binom{2k}{j} p^j q^{2k-j} from binomial theorem
result <- sum(dbinom(f,2*k,p))
if (result > maxprob) { # update max probability and best n/2 if necessary
maxprob = result
optn = k
}
print(result) # print each individual trial result
}
print(maxprob) # print max probability of winning
print(2 * optn) # print optimal n in this range
p <- 0.5 # change p here to 0.49, 0.50, 0.51
maxprob <- 0 # store max probability over range
optn <- 0 # store value of n/2 that maximizes chance of winning
for(k in 1:100) { # loop over all 1000 possibilities; 2 games to 2000 games
f <- c((k+1):(2*k)) # create list to loop over
# P(win) = \sum_{k+1}^{2k} \binom{2k}{j} p^j q^{2k-j} from binomial theorem
result <- sum(dbinom(f,2*k,p))
if (result > maxprob) { # update max probability and best n/2 if necessary
maxprob = result
optn = k
}
print(result) # print each individual trial result
}
print(maxprob) # print max probability of winning
print(2 * optn) # print optimal n in this range
p <- 0.49 # change p here to 0.49, 0.50, 0.51
maxprob <- 0 # store max probability over range
optn <- 0 # store value of n/2 that maximizes chance of winning
for(k in 1:100) { # loop over all 1000 possibilities; 2 games to 2000 games
f <- c((k+1):(2*k)) # create list to loop over
# P(win) = \sum_{k+1}^{2k} \binom{2k}{j} p^j q^{2k-j} from binomial theorem
result <- sum(dbinom(f,2*k,p))
if (result > maxprob) { # update max probability and best n/2 if necessary
maxprob = result
optn = k
}
print(result) # print each individual trial result
}
print(maxprob) # print max probability of winning
print(2 * optn) # print optimal n in this range
a <- 0.5
Q <- matrix(c(0,0,a,a,0,a,0,0,0,0,a,a,0,0,0,0,a,a,0,0,0,0,0,a,1), nrow=5)
install.packages("expm")
library(expm)
Q %^% k
Q %^% 10
Q %^% 100
Q %^% 4
Q %^% 5
sum(Q %^% 5[:,1])
A <- Q %^% 5
sum(A)
sum(A[1,3])
sum(A[1:5,1])
sum(A[2:5,1])
sum(A[1:5,2])
sum(A[1:5,3])
sum(A[1:5,1:4])
A <- Q %^% 4
sum(A[1:5,1:4])
A <- Q %^% 3
sum(A[1:5,1:4])
sum(A)
A <- Q %^% 5
A[1,5]-sum(A[1,1:4])
A <- Q %^% 6
A[1,5]-sum(A[1,1:4])
A <- Q %^% 7
A[1,5]-sum(A[1,1:4])
B <- matrix(c(0,0,a,a,a,0,0,0,a,a,0,0,0,a,a,0), nrow=4)
C <- diag(4) - B
D <- solve(C)
D
B
C
solve(C)
sum(D)
sum(D[1,1:4])
?ppois
ppois(109,lambda=100)
??pois
ls
cd Desktop
getwd()
setwd('/Users/ansonkahng/Fontana/wk3')
getwd()
source('~/Fontana/wk3/ns_buckley_james_AFT.r', echo=TRUE)
View(chloroquine_deaths)
View(agg)
sum(agg)
sum(agg(:,2))
sum(agg(,2))
agg
sum(agg$N)
chloroquine_deaths <- read.csv("2014_07_25_incubator_4_chloroquine_2.csv");
View(chloroquine_deaths)
source('~/Fontana/wk3/ns_buckley_james_AFT.r', echo=TRUE)
View(agg)
View(chloroquine_deaths)
sum(chloroquine_deaths$Age.at.Death..d..Raw)
